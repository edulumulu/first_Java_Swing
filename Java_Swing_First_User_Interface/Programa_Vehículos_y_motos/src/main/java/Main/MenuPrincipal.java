
package Main;

import static Controlador.Controlador.crearArchivo;
import static Controlador.Controlador.crearPilaVehiculosPredeterminada;
import static Controlador.Controlador.eliminarTodoElMapa;
import static Controlador.Controlador.escribirDocu;
import static Controlador.Controlador.mostrarCoches;
import static Controlador.Controlador.mostrarMotos;
import static Controlador.Controlador.obtenerVehiculos;
import static Controlador.Controlador.recorrerVehiculos;
import static Controlador.Controlador.recuperarDocu;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import misExcepciones.misExcepciones;
import modelo.Vehiculo;

/**
 *
 * @author edulumulu
 */
public class MenuPrincipal extends javax.swing.JFrame {

    /**
     * Creates new form MenuPrincipal
     */
    public MenuPrincipal() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        ingresarBoton = new javax.swing.JButton();
        eliminarBoton = new javax.swing.JButton();
        MostrarCocheBoton = new javax.swing.JButton();
        MostrarMotoBoton = new javax.swing.JButton();
        SalirBoton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Menu Principal");
        setAutoRequestFocus(false);
        setBackground(new java.awt.Color(2, 242, 242));
        setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        getContentPane().setLayout(new java.awt.GridBagLayout());

        ingresarBoton.setText("Ingresar Vehículo");
        ingresarBoton.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        ingresarBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ingresarBotonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(20, 30, 10, 30);
        getContentPane().add(ingresarBoton, gridBagConstraints);

        eliminarBoton.setText("Eliminar vehículo");
        eliminarBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminarBotonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(10, 30, 10, 30);
        getContentPane().add(eliminarBoton, gridBagConstraints);

        MostrarCocheBoton.setText("Mostrar coches");
        MostrarCocheBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MostrarCocheBotonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(10, 30, 10, 30);
        getContentPane().add(MostrarCocheBoton, gridBagConstraints);

        MostrarMotoBoton.setText("Mostrar motos");
        MostrarMotoBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MostrarMotoBotonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(10, 30, 10, 30);
        getContentPane().add(MostrarMotoBoton, gridBagConstraints);

        SalirBoton.setText("Salir");
        SalirBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SalirBotonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(10, 60, 20, 60);
        getContentPane().add(SalirBoton, gridBagConstraints);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void ingresarBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ingresarBotonActionPerformed

        /*
        Abre un jdialog para ingresar vehículos
        */
        IngresarVehiculo ingreso = new IngresarVehiculo(this, true);
        ingreso.setLocationRelativeTo(null);
//        ingreso.setSize(600, 600);
        ingreso.setVisible(true);


    }//GEN-LAST:event_ingresarBotonActionPerformed

    
    private void MostrarMotoBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MostrarMotoBotonActionPerformed

        if (obtenerVehiculos().isEmpty()) { //Si el mapa vehículos está vacío muestra un panel con un mensaje de error
            JOptionPane.showMessageDialog(this, "No hay vehículos registrados", "Sin vehículos", JOptionPane.INFORMATION_MESSAGE);
        } else {                    //En caso contrario comprueba si el String está vacío, si es así muestrar error, si no habre el jdialog miostrar motos.
            if (mostrarMotos() == "[]") {
                JOptionPane.showMessageDialog(this, "No hay motos registrados", "Sin vehículos", JOptionPane.INFORMATION_MESSAGE);

            } else {
                //En un principio como tenía problemas con jpanel hice que mostrara la info en un panel de información
//                JOptionPane.showMessageDialog(this, mostrarMotos(), "Listado de motos", JOptionPane.INFORMATION_MESSAGE);
             
            MostrarMotos mostrar = new MostrarMotos(this, true);
            mostrar.setLocationRelativeTo(null);
            mostrar.setVisible(true);

            }

        }

    }//GEN-LAST:event_MostrarMotoBotonActionPerformed

    private void SalirBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SalirBotonActionPerformed
                   
        /*
        Intenta escribir los cambios en una rchivo, avisa tanto si lo ha hehco como si ha saltado alguna excepción
        */
                
        try{
           escribirDocu();
           JOptionPane.showMessageDialog(this, "Base de datos actualizada", "Base de datos actualizada", JOptionPane.INFORMATION_MESSAGE);
       }catch(FileNotFoundException e){
            System.out.println("Documento no encontrado.");
            JOptionPane.showMessageDialog(this, "No se pudo actualizar la base de datos", "Error de almacenaje", JOptionPane.INFORMATION_MESSAGE);
        } catch (IOException ex) {
            Logger.getLogger(MenuPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "No se pudo actualizar la base de datos", "Error de almacenaje", JOptionPane.INFORMATION_MESSAGE);
        }
        dispose();
    }//GEN-LAST:event_SalirBotonActionPerformed

    private void eliminarBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminarBotonActionPerformed

        if (obtenerVehiculos().isEmpty()) {  //Si el mapa vehículos está vacío muestra un panel con un mensaje de error
            JOptionPane.showMessageDialog(this, "No hay vehículos registrados", "Sin vehículos", JOptionPane.INFORMATION_MESSAGE);
        } else {

            BorrarVehículoPorTipo mostrar = new BorrarVehículoPorTipo(this, true);
            mostrar.setLocationRelativeTo(null);
            mostrar.setVisible(true);

            //En un principio hice una clase en la que borraba el vehículo solo con la matrícula
//        BorrarMatrícula mostrar = new BorrarMatrícula(this, true);
//        mostrar.setLocationRelativeTo(null);
//        mostrar.setVisible(true);
        }
    }//GEN-LAST:event_eliminarBotonActionPerformed

    private void MostrarCocheBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MostrarCocheBotonActionPerformed
        /*
        Funciona igual que mostrar motos
        */
        if (obtenerVehiculos().isEmpty()) {     //Si el mapa vehículos está vacío muestra un panel con un mensaje de error
            JOptionPane.showMessageDialog(this, "No hay vehículos registrados", "Sin vehículos", JOptionPane.INFORMATION_MESSAGE);
        } else {
            if (mostrarCoches() == "[]") {
                JOptionPane.showMessageDialog(this, "No hay coches registrados", "Sin vehículos", JOptionPane.INFORMATION_MESSAGE);

            } else {
//                JOptionPane.showMessageDialog(this, mostrarCoches(), "Listado de coches", JOptionPane.INFORMATION_MESSAGE);

                MostrarCoches mostrar = new MostrarCoches(this, true);
                mostrar.setLocationRelativeTo(null);
                mostrar.setVisible(true);
            }

        }
    }//GEN-LAST:event_MostrarCocheBotonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MenuPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MenuPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MenuPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MenuPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        
        try{
            crearArchivo();         //Creo el archivo si no existe previamente (en caso de que séa la primera vez que se usa la aplicación
           recuperarDocu();         // Recupero la información de los vehiculos almacenados en otras sesiones
        }catch(FileNotFoundException e){
            System.out.println("Documento no encontrado.");
        }  catch (misExcepciones ex) {
            Logger.getLogger(MenuPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        crearPilaVehiculosPredeterminada();
        recorrerVehiculos();
//        eliminarTodoElMapa();
//        System.out.println("desoues de eliminado: ");
//        
//        recorrerVehiculos();
        

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MenuPrincipal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton MostrarCocheBoton;
    private javax.swing.JButton MostrarMotoBoton;
    private javax.swing.JButton SalirBoton;
    private javax.swing.JButton eliminarBoton;
    private javax.swing.JButton ingresarBoton;
    // End of variables declaration//GEN-END:variables
}
